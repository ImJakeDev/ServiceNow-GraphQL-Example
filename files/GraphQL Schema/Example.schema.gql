schema {
  query: Query
}

type Query {
  allIncident(
    filter: IncidentQueryFilter
    paginate: QueryPaginate
    sort: QuerySort
  ): IncidentResultList
  incident(number: String!): Incident
}

type Incident {
  id: ID!
  number: String!
  active: Boolean
  state: IncidentState @source(value: "state.value")
  priority: IncidentPriority @source(value: "priority.value")
  impact: IncidentImpact @source(value: "impact.value")
  urgency: IncidentUrgency @source(value: "urgency.value")
  description: String
  resolvedBy: User @source(value: "resolvedBy.value")
  openedBy: User @source(value: "openedBy.value")
  openedAt(format: String): String @source(value: "openedAt.value")
  resolvedAt(format: String): String @source(value: "resolvedAt.value")
  closedAt(format: String): String @source(value: "closedAt.value")
  parentIncident: Incident @source(value: "parentIncident.value")
  childIncidents(filter: IncidentQueryFilter): IncidentResultList
  @source(value: "childIncidents.value")
}

type User {
  id: String
  email: String
}

type IncidentResultList {
  rowCount: Int
  pageInfo: PageInfo
  results: [Incident]
}

type PageInfo {
  totalPages: Int
  currentPage: Int
}

input QueryPaginate {
  perPage: Int
  page: Int
}

input QuerySort {
  by: String!
  order: SortOrder
}

input IncidentQueryFilter {
  number: IncidentNumberOperatorInput
  state: IncidentStateOperatorInput
  contactType: IncidentContactTypeOperatorInput
  impact: IncidentImpactOperatorInput
  urgency: IncidentUrgencyOperatorInput
  priority: IncidentPriorityOperatorInput
}

enum SortOrder {
  ASC
  DESC
}
enum IncidentState {
  #Incident is logged but not yet triaged.
  NEW
  #Incident is assigned and is being investigated.
  IN_PROGRESS
  #The responsibility for the incident shifts temporarily to another entity to provide further information, evidence, or a resolution
  ON_HOLD
  #A satisfactory fix is provided for the incident to ensure that it does not occur again.
  RESOLVED
  #Incident is marked Closed after it is in the Resolved state for a specific duration and it is confirmed that the incident is satisfactorily resolved.
  CLOSED
  #Incident was triaged but found to be a duplicate incident, an unnecessary incident, or not an incident at all.
  CANCELED
}

enum IncidentContactType {
  EMAIL
  PHONE
  SELF_SERVICE
  WALK_IN
}

enum IncidentImpact {
  LOW
  MEDIUM
  HIGH
}

enum IncidentUrgency {
  LOW
  MEDIUM
  HIGH
}

enum IncidentPriority {
  PLANNING
  LOW
  MODERATE
  HIGH
  CRITICAL
}

input IDQueryOperatorInput {
  # Filter by property of (strict) equality.
  eq: ID
  # Filter by property not equal to provided value.
  ne: ID
  # Filter by property matching any of the provided values.
  in: [ID]
}

input StringQueryOperatorInput {
  # Filter by property of (strict) equality.
  eq: String
  # Filter by property not equal to provided value.
  ne: String
  # Filter by property matching any of the provided values.
  in: [String]
}

input StringBetweenQueryFilter {
  from: String!
  to: String!
}

input IncidentNumberOperatorInput {
  # Filter by property of (strict) equality.
  eq: String
  # Filter by property not equal to provided value.
  ne: String
  # Filter by property matching any of the provided values.
  in: [String]
  nin: [String]
  lte: String
  lt: String
  gt: String
  gte: String
  between: StringBetweenQueryFilter
}

input IncidentStateOperatorInput {
  # Filter by property of (strict) equality.
  eq: IncidentState
  # Filter by property not equal to provided value.
  ne: IncidentState
  # Filter by property matching any of the provided values.
  in: [IncidentState]
}

input IncidentContactTypeOperatorInput {
  # Filter by property of (strict) equality.
  eq: IncidentContactType
  # Filter by property not equal to provided value.
  ne: IncidentContactType
  # Filter by property matching any of the provided values.
  in: [IncidentContactType]
  nin: [String]
}

input IncidentUrgencyOperatorInput {
  # Filter by property of (strict) equality.
  eq: IncidentUrgency
  # Filter by property not equal to provided value.
  ne: IncidentUrgency
  # Filter by property matching any of the provided values.
  in: [IncidentUrgency]
  nin: [String]
}

input IncidentImpactOperatorInput {
  # Filter by property of (strict) equality.
  eq: IncidentImpact
  # Filter by property not equal to provided value.
  ne: IncidentImpact
  # Filter by property matching any of the provided values.
  in: [IncidentImpact]
  nin: [String]
}

input IncidentPriorityOperatorInput {
  # Filter by property of (strict) equality.
  eq: IncidentPriority
  # Filter by property not equal to provided value.
  ne: IncidentPriority
  # Filter by property matching any of the provided values.
  in: [IncidentPriority]
  nin: [String]
}
